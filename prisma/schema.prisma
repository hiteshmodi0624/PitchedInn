generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum userType {
  Collector
  Business
  Investor
  Regular
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?    @unique
  coverImage    String?
  bio           String?
  userType      userType   @default(Regular)
  savedPosts    String[]   @default([])
  followers     String[]   @default([])
  following     String[]   @default([])
  collector     Collector?
  investor      Investor?
  business      Business?
  posts         Post[]
  comment       Comment[]
  like          Like[]
  collect       Collect[]
  save          Save[]
  password      String?
  dob           DateTime?
  chatIds       String[]   @default([]) @db.ObjectId
  chat          Chat[]     @relation(fields: [chatIds], references: [id])
}

enum mediaType {
  Pitch
  Images
}

enum ChatType {
  SINGLE
  GROUP
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        ChatType
  messages    Message[]
  userIds     String[]  @default([]) @db.ObjectId @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  groupName   String?
  description String?
  photo       String?
  Users       User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
  creatorId String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  caption   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mediaType mediaType
  mediaUrl  String[]
  like      Like[]
  collect   Collect[]
  save      Save[]
  comment   Comment[]
  share     Int       @default(0)
  creatorId String    @db.ObjectId
  creator   User      @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Collect {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Save {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

type Collector {
  collectedPosts String[]
}

type Investor {
  investorName    String
  investorDetails InvestorDetails
  investments     String[]
}

type Business {
  companyName     String
  businessDetails BusinessDetails
  posts           String[]
}

type InvestorDetails {
  investmentFocus     String
  investorDescription String?
  location            String?
  contactInfo         InvestorContactInfo?
  portfolio           PortfolioItem[]
  investmentCriteria  InvestmentCriteria?
}

type InvestorContactInfo {
  contactEmail String?
  website      String?
  socialLinks  SocialLinks?
}

type PortfolioItem {
  companyName String
  industry    String
  description String?
  website     String?
}

type InvestmentCriteria {
  industries            String[]
  geographicFocus       String[]
  minimumInvestmentSize Int?
  maximumInvestmentSize Int?
  investmentStage       String?
}

type BusinessDetails {
  niche                String
  industry             String
  businessDescription  String
  location             String
  businessContactInfo  BusinessContactInfo
  fundingInfo          FundingInfo
  extendedBusinessInfo ExtendedBusinessInfo
}

type BusinessContactInfo {
  contactEmail String
  website      String
  socialLinks  SocialLinks
}

type FundingInfo {
  traction        String
  milestones      String
  fundingStage    String
  amountSought    String
  investmentTerms String
}

type ExtendedBusinessInfo {
  usp                  String
  problemStatement     String
  solution             String
  targetMarket         String
  competitiveLandscape String
  businessModel        String
  goMarketStrategy     String
  teamInfo             String
  financialInfo        String
}

type SocialLinks {
  linkedIn  String?
  twitter   String?
  instagram String?
  facebook  String?
  youtube   String?
  pinterest String?
  medium    String?
  github    String?
  behance   String?
  dribbble  String?
  snapchat  String?
  tiktok    String?
  clubhouse String?
  telegram  String?
}
